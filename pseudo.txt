ere is the pseudo-code for the algorithm:

    Load the text file and preprocess it (remove copyright, metadata, and join lines).

    Calculate the length (L) of the text and the number of unique characters (U).

    Determine the minimum value of n (sequence length) based on U.

    Calculate the required number of Pi digits (K) for the first approximation (K = n * L).

    Calculate K digits of Pi using the Chudnovsky algorithm.

    FUNCTION map_pi(n, L):
        Split Pi into sequences of length n.
        Return the first L sequences.

    FUNCTION busca_solucion(n, text):
        Initialize a boolean variable "found" to False.
        WHILE not found:
            Initialize an empty dictionary "solution".
            Get the Pi sequences using the map_pi function with n and L.
            FOR each sequence and character in the text (use index i):
                IF the sequence is not in the solution:
                    Add the sequence as a key and the character as its value to the solution.
                ELSE:
                    IF the sequence's value in the solution is the same as the character:
                        Continue with the next sequence.
                    ELSE:
                        Increment n by 1.
                        Set found to False.
                        Break the for loop.
            IF the for loop completed without breaking:
                Set found to True.
        RETURN the solution dictionary.

    Call busca_solucion with the initial value of n and the text.

    Analyze the solution and create a DataFrame with the dictionary keys and values.

    Group the DataFrame by character values and count the number of keys for each value.

    Sort the DataFrame by the number of keys.

    Plot the distribution of the number of keys for each character using a bar plot.



The code provided calculates a mapping of the text from "Don Quixote" (first chapter) to digits of Pi, specifically to sequences of digits, where each sequence has a length of n. The process starts with n=2, and if it doesn't find a valid solution, it increases n by 1 and tries again. The main goal is to find a valid encoding of the text using digits of Pi. The code also includes some exploratory data analysis and a bar plot visualizing the distribution of the number of keys (sequences of digits) for each character in the text.

Here is an outline of the code:

    Import required libraries and define the path to the text file.
    Calculate the length of the text and the number of unique characters.
    Determine the minimum value of n, the length of each digit sequence.
    Estimate the number of digits of Pi required for the first approximation.
    Calculate the specified number of digits of Pi using the Chudnovsky algorithm.
    Map the digits of Pi into sequences of n digits.
    Attempt to create a dictionary that maps digit sequences to characters in the text.
    If a valid solution is not found, increment n by 1 and repeat the process until a solution is found.
    Analyze the solution by creating a matrix with the dictionary keys and values, and import it into a pandas DataFrame.
    Group the DataFrame by character values and count the number of keys for each value.
    Sort the DataFrame by the number of keys.
    Plot the distribution of the number of keys for each character using a bar plot.

Please let me know if you need any further clarification or if you have any questions about the code.
